{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Input/Input.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","Input","props","htmlFor","name","text","toUpperCase","slice","id","placeholder","type","pattern","required","onBlur","initalFields","initalErrors","patternUrl","NewMovie","state","fields","errors","handleChange","event","target","value","setState","prevState","handleBlur","inputIsEmpty","trim","urlFormatNotValid","test","match","idFormatNotValid","handleSubmit","preventDefault","Object","entries","some","error","addMovie","this","preparedFields","err","onSubmit","inputName","onChange","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0fc3299e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst formText = text => text[0].toUpperCase() + text.slice(1);\n\nexport const Input = props => (\n  <div className=\"field\">\n    <label htmlFor={props.name} className=\"label\">\n      {formText(props.name)}\n    </label>\n    <div>\n      <input\n        {...props}\n        className=\"input\"\n        id={props.name}\n        placeholder={props.name}\n      />\n    </div>\n  </div>\n);\n\nInput.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n};\n\nInput.defaultProps = {\n  type: 'text',\n  pattern: '.+',\n  required: true,\n  title: ``,\n  onBlur: () => {},\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Input } from '../Input/Input';\nimport './NewMovie.scss';\n\nconst initalFields = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nconst initalErrors = {\n  title: false,\n  imgUrl: false,\n  imdbUrl: false,\n  imdbId: false,\n};\n\n// eslint-disable-next-line max-len\nconst patternUrl = '^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:[-;:&=+$,\\\\w]+@)\\n?[A-Za-z0-9.-]+|(?:www\\\\.|[-;:&=+$,\\\\w]+@)[A-Za-z0-9.-]+)\\n((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:[-+=&;%@.\\\\w_]*)#?\\n(?:[.!/\\\\\\\\\\\\w]*))?)$';\nconst patternId = 'tt\\\\d{7}';\n\nexport class NewMovie extends Component {\n  state = {\n    fields: { ...initalFields },\n    errors: { ...initalErrors },\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      fields: {\n        ...prevState.fields,\n        [name]: value,\n      },\n      errors: {\n        ...prevState.errors,\n        [name]: false,\n      },\n    }));\n  }\n\n  handleBlur = (event) => {\n    const { name } = event.target;\n\n    this.setState((prevState) => {\n      const inputIsEmpty = !prevState.fields[name].trim();\n\n      const urlFormatNotValid = /Url/.test(name)\n        && !prevState.fields[name].match(patternUrl);\n\n      const idFormatNotValid = name === 'imdbId'\n        && !prevState.fields[name].match(patternId);\n\n      if (inputIsEmpty || urlFormatNotValid || idFormatNotValid) {\n        return ({\n          errors: {\n            ...prevState.errors,\n            [name]: true,\n          },\n        });\n      }\n\n      return ({\n        errors: {\n          ...prevState.errors,\n          [name]: false,\n        },\n      });\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { errors } = this.state;\n\n    if (Object.entries(errors).some(error => error[1])) {\n      return;\n    }\n\n    this.props.addMovie(this.state);\n    this.setState({\n      fields: { ...initalFields },\n      errors: { ...initalErrors },\n    });\n  }\n\n  render() {\n    const { fields, errors } = this.state;\n    const preparedFields = Object.entries(fields);\n    const preparedErrors = Object.entries(errors);\n    const error = preparedErrors.some(err => err[1]);\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {error && <div className=\"error\">Not valid input</div> }\n        {preparedFields.map(([inputName, value]) => (\n          <Input\n            key={inputName}\n            name={inputName}\n            value={value}\n            onChange={this.handleChange}\n            onBlur={this.handleBlur}\n          />\n        ))\n        }\n        <button type=\"submit\" className=\"button is-link\">\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}